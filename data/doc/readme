Akrios MUD Engine
Last Updated: Thu Aug 5 2004

Concept and code by Adrian Blackwell and Brett Phipps.
All Akrios code is copyrighted and closed source.


The purpose of this README is many fold.  I will give you a general overview
of each code file.  The intent of each particular file along with a
description of 'how things work' as we go.  I will attempt to layout a list of
goals incrementally up to and including a 1.0 stable open to the public version.

First, I shall give a hopefully brief overview of how everything will work and
fit together.  This is bound to change on any given day, but it should give
you enough of an idea of how I would like things to be.  You should also note,
that each modules listing will flush out a bit more as I get additional
functionality into it.  This may well end up becoming an API document of some
kind.

Server:  The Server module will handle all socket communication and contain
the main game loop.  It contains a ConnSocket class which handles
communication to and from each particular connection.  It contains a Server
class which binds us to a socket, listens for new connections (handling them
as they come in) and runs the main game loop which polls each ConnSocket in
our connection list for activity.  The asyncore module handles most of the hard
stuff for us here.  With the exception of a deciding how to handle prompts this
is all pretty basic stuff.  And about 99% finished until we decide to try NAWS
again.

Util:  This module will contain code which will provide assisting code 
for several of the modules.  New code that isn't yet suitable for it's own
module will also end up in this file.  Right now our ANSI color code, some
of the input parsing code (which should migrate back into Server sometime)
and the Buffer class used in the OLC code resides in here.

Being: The Being module will contain code that is shared between players and
NPC's.  Our Player module and Mobile module will both inherit code from this
module.  Also of interest is the interp method of this class which handles all
input for that person.

Player: The player module will contain code relevant to a player.  It inherits
from the Being module.  Recently moved over to the Flatfile style savefile.
Begin flushing out with the various helper methods and additional info.

Area: The area module will contain the classes for areas, rooms and exits.  It
will handle everything for each of these types of objects.  The Area and Room
classes will inherit from the Atomic class.

Wilderness: The Wilderness module will handle everything to do with the
inbetween area wilderness.  It will keep track of who's in the wilderness, 
what each particular player can see in the wilderness, etc.

Help:  This module will handle everything dealing with help files.  From
loading the list of help files, to returning the data when a help call is made.
This module now also keeps a running list of 'missing' help files in a 
particular log file so we can add any helpfiles which players are trying to
find but we don't have in yet.

Login:  This module will be the bread and butter of getting into the game 
itself.  We will handle account logging in, character selection/creation and 
management.

Event:  This module now contains actual working event code.  I'm still not 100%
sure how to handle uniquely identifying (or in what context we would need to) 
specific events, but I can easily drop that in in the future.


Although the MOTD states that versioning is pointless right now, I still
will be keeping an internal version for various pieces being 'done'. Most of
this has been tweaked or rewritten entirely to reflect the massive amount of
work that has been done since it was first written.

Things we need for particular version benchmarks:

0.1:
A basic framework of needed modules and what each module does.
   (Basically this file. Of course, this will change gradually)
A working server module that accepts connections with error checking.
A working help module to parse/serve up help files.
Take advantage of Pythons logging new to 2.3.  Begin working this into any
    new code that will need it.  Mainly Server and Player so far.
A working error module giving us several basic Error types to raise.

0.2:
A basic player class framework to assist with login creation/testing.
A login module to handle account logins/creations and character creations.
   Race and profession should be the only thing not done at this point.
Flush out the player class a bit and add saving/loading capabilities.
A race module to handle race plugins.  Start with generic place holders to use
   in login module testing.

[Note: 0.1 and 0.2 will blend together as I go back and forth.  One or two of
 the items will even bleed over into 0.3, and 0.3 will probably bleed over
 into 0.4 etc.]

0.3:
Flush out the race module to include loading races as plugins.
   (Also tidy up some of the Login module and finish off race selection)
A command class to handle command plugins. (With a few standard commands)
   also descide how to break up the various types of commands.  All one large
   file of commands or should we break it down into smaller files.  No idea
   on this one yet.
A utils module to house various things, including color code and flatfile
   parsing helper functions.  These should probably migrate into their own
   little library soon, but not right now.

[Note: Somewhere between 0.3 and 0.4 the 'OLC' code will get flushed out.  THe
 basics are being used for helps, races and the flatfile parser that ties in
 is also being used on player files.  The actualy format for area files will
 be descided during 0.4 (at least mostly).]

0.4:
Area/Room/Exit module to contain basic areas with rooms that link.  Remember
   each exit will be it's own object between the two rooms.  This will take a
   fairly large chunk of RAM, but it will be well worth it when we need the
   maximum amount of flexibility.
Add dumping a player to an area in Login module.
Go over ALL code written so far.  Ensure proper style is used in all code.
   Also go over each file carefully for anything that is obviously 'bad' or
   could easily be improved in some way.  We won't find _alot_ of this, but
   the few we find now will help out later when we go through optimizing
   things.

0.5:
Complete wilderness code with tie ins to the area module.  At this point we
   should have 2 generic areas with rooms and exits with the Area code
   flushed out as much as possible.  Our Wilderness should take into account
   there will be multiple 'planes'.  Also keep in mind the main Area class will
   keep track of all exits that point to the wilderness.  The movement code
   should check this list if the player is in specific vnums or xyz coordinates
   and move them between accordingly.
At this point some extensive testing will occur.  All development will stop
   with the exception of bugfixing.  We should be looking at how everything
   'looks'.  Colors can wait until later.  But I want to make sure all
   formatting is good, editors display properly etc.  Basically just play with
   every command for a day or two with a few people and fix anything major that
   pops up.

0.6 and beyond:
Mobiles and Objects will come during or after this version.

0.7 and beyond:
Skills and Spells will come during or after this version.

0.8:
Hard to speculate.  This list will probably get another major overhaul around
   the middle or end of 0.5.  Of course, nothing stops us from jumping around
   a little bit and writing up some code or placeholders to get a better idea
   of how something will interact, but this should give us a good idea.
   
